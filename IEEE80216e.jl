using LinearAlgebra

function
    IEEE80216e(
        N::Integer,
        R::Float64;
        mode = "A"
    )

    if R ≤ 1/2
        rate = "1/2"
    elseif R ≤ 2/3
        if mode == "A"
            rate = "2/3A"
        elseif mode == "B"
            rate = "2/3B"
        else
            throw(
            ArgumentError(
                "$mode should be A or B"
            )
            )
        end
    elseif R ≤ 3/4
        if mode == "A"
            rate = "3/4A"
        elseif mode == "B"
            rate = "3/4B"
        else
            throw(
            ArgumentError(
                "$mode should be A or B"
            )
            )
        end
    else
        rate = "5/6"
    end
    
    z0 = 96; #the largest sub-block-size.
    if rate == "1/2"
        E_H = [-1 94 73 -1 -1 -1 -1 -1 55 83 -1 -1  7  0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1;
             -1 27 -1 -1 -1 22 79  9 -1 -1 -1 12 -1  0  0 -1 -1 -1 -1 -1 -1 -1 -1 -1;
             -1 -1 -1 24 22 81 -1 33 -1 -1 -1  0 -1 -1  0  0 -1 -1 -1 -1 -1 -1 -1 -1;
             61 -1 47 -1 -1 -1 -1 -1 65 25 -1 -1 -1 -1 -1  0  0 -1 -1 -1 -1 -1 -1 -1;
             -1 -1 39 -1 -1 -1 84 -1 -1 41 72 -1 -1 -1 -1 -1  0  0 -1 -1 -1 -1 -1 -1;
             -1 -1 -1 -1 46 40 -1 82 -1 -1 -1 79  0 -1 -1 -1 -1  0  0 -1 -1 -1 -1 -1;
             -1 -1 95 53 -1 -1 -1 -1 -1 14 18 -1 -1 -1 -1 -1 -1 -1  0  0 -1 -1 -1 -1;
             -1 11 73 -1 -1 -1  2 -1 -1 47 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0 -1 -1 -1;
             12 -1 -1 -1 83 24 -1 43 -1 -1 -1 51 -1 -1 -1 -1 -1 -1 -1 -1  0  0 -1 -1;
             -1 -1 -1 -1 -1 94 -1 59 -1 -1 70 72 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0 -1;
             -1 -1  7 65 -1 -1 -1 -1 39 49 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0  0;
             43 -1 -1 -1 -1 66 -1 41 -1 -1 -1 26  7 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0]

    elseif rate == "2/3A"
        E_H = [ 3  0 -1 -1  2  0 -1  3  7 -1  1  1 -1 -1 -1 -1  1  0 -1 -1 -1 -1 -1 -1;
             -1 -1  1 -1 36 -1 -1 34 10 -1 -1 18  2 -1  3  0 -1  0  0 -1 -1 -1 -1 -1;
             -1 -1 12  2 -1 15 -1 40 -1  3 -1 15 -1  2 13 -1 -1 -1  0  0 -1 -1 -1 -1;
             -1 -1 19 24 -1  3  0 -1  6 -1 17 -1 -1 -1  8 39 -1 -1 -1  0  0 -1 -1 -1;
             20 -1  6 -1 -1 10 29 -1 -1 28 -1 14 -1 38 -1 -1  0 -1 -1 -1  0  0 -1 -1;
             -1 -1 10 -1 28 20 -1 -1  8 -1 36 -1  9 -1 21 45 -1 -1 -1 -1 -1  0  0 -1;
             35 25 -1 37 -1 21 -1 -1  5 -1 -1  0 -1  4 20 -1 -1 -1 -1 -1 -1 -1  0  0;
             -1  6  6 -1 -1 -1  4 -1 14 30 -1  3 36 -1 14 -1  1 -1 -1 -1 -1 -1 -1  0]

    elseif rate == "2/3B"
        E_H = [ 2 -1 19 -1 47 -1 48 -1 36 -1 82 -1 47 -1 15 -1 95  0 -1 -1 -1 -1 -1 -1;
             -1 69 -1 88 -1 33 -1  3 -1 16 -1 37 -1 40 -1 48 -1  0  0 -1 -1 -1 -1 -1;
             10 -1 86 -1 62 -1 28 -1 85 -1 16 -1 34 -1 73 -1 -1 -1  0  0 -1 -1 -1 -1;
             -1 28 -1 32 -1 81 -1 27 -1 88 -1  5 -1 56 -1 37 -1 -1 -1  0  0 -1 -1 -1;
             23 -1 29 -1 15 -1 30 -1 66 -1 24 -1 50 -1 62 -1 -1 -1 -1 -1  0  0 -1 -1;
             -1 30 -1 65 -1 54 -1 14 -1  0 -1 30 -1 74 -1  0 -1 -1 -1 -1 -1  0  0 -1;
             32 -1  0 -1 15 -1 56 -1 85 -1  5 -1  6 -1 52 -1  0 -1 -1 -1 -1 -1  0  0;
             -1  0 -1 47 -1 13 -1 61 -1 84 -1 55 -1 78 -1 41 95 -1 -1 -1 -1 -1 -1  0]

    elseif rate == "3/4A"
        E_H = [ 6 38  3 93 -1 -1 -1 30 70 -1 86 -1 37 38  4 11 -1 46 48  0 -1 -1 -1 -1;
             62 94 19 84 -1 92 78 -1 15 -1 -1 92 -1 45 24 32 30 -1 -1  0  0 -1 -1 -1;
             71 -1 55 -1 12 66 45 79 -1 78 -1 -1 10 -1 22 55 70 82 -1 -1  0  0 -1 -1;
             38 61 -1 66  9 73 47 64 -1 39 61 43 -1 -1 -1 -1 95 32  0 -1 -1  0  0 -1;
             -1 -1 -1 -1 32 52 55 80 95 22  6 51 24 90 44 20 -1 -1 -1 -1 -1 -1  0  0;
             -1 63 31 88 20 -1 -1 -1  6 40 56 16 71 53 -1 -1 27 26 48 -1 -1 -1 -1  0]
            
    elseif rate == "3/4B"
        E_H = [-1 81 -1 28 -1 -1 14 25 17 -1 -1 85 29 52 78 95 22 92  0  0 -1 -1 -1 -1;
             42 -1 14 68 32 -1 -1 -1 -1 70 43 11 36 40 33 57 38 24 -1  0  0 -1 -1 -1;
             -1 -1 20 -1 -1 63 39 -1 70 67 -1 38  4 72 47 29 60  5 80 -1  0  0 -1 -1;
             64  2 -1 -1 63 -1 -1  3 51 -1 81 15 94  9 85 36 14 19 -1 -1 -1  0  0 -1;
             -1 53 60 80 -1 26 75 -1 -1 -1 -1 86 77  1  3 72 60 25 -1 -1 -1 -1  0  0;
             77 -1 -1 -1 15 28 -1 35 -1 72 30 68 85 84 26 64 11 89  0 -1 -1 -1 -1  0]

    elseif rate == "5/6"
        E_H = [ 1 25 55 -1 47  4 -1 91 84  8 86 52 82 33  5  0 36 20  4 77 80  0 -1 -1;
             -1  6 -1 36 40 47 12 79 47 -1 41 21 12 71 14 72  0 44 49  0  0  0  0 -1;
             51 81 83  4 67 -1 21 -1 31 24 91 61 81  9 86 78 60 88 67 15 -1 -1  0  0;
             50 -1 50 15 -1 36 13 10 11 20 53 90 29 92 57 30 84 92 11 66 80 -1 -1  0]

    end
    
    zf = N÷size(E_H,2)
    for i in axes(E_H,1)
        for j in axes(E_H,2)
            if E_H[i,j] > 0
                if rate == "2/3A"
                    E_H[i,j] = rem(E_H[i,j],zf)
                else
                    E_H[i,j] = fld(E_H[i,j]*zf,z0)
                end
            end
        end
    end

    base_M = size(E_H,1)
    base_N = size(E_H,2)
    H = zeros(Bool, zf * base_M, zf * base_N)
    I_matrix = Matrix(I(zf))
    for i = 1:base_M
        for j = 1:base_N
            if E_H[i,j] != -1
                H[(i-1)*zf+1 : i*zf,(j-1)*zf+1 : j*zf] = circshift(I_matrix,(0,E_H[i,j]))
            end
        end
    end

    return H, zf, E_H
end

function 
    IEEE80216e_parity_bits(
        c::Vector{Bool},
        zf::Integer,
        E_H::Matrix{<:Integer},
        E_M::Integer,
        E_N::Integer,
        E_K::Integer
    )

    cw = zeros(Bool,zf,E_N+1)
    cw[1:zf*E_K] = c

    a = zeros(Bool,zf,E_M)
    Sc = zeros(Bool,zf)

    @inbounds for i = 1:E_M
        for j = 1:E_K            
            if E_H[i,j] ≠ -1
                a[:,i] .⊻= circshift(cw[:,j],-E_H[i,j])
            end
        end
        Sc .⊻= a[:,i]
    end

    @inbounds for i = 1:E_M
        if E_H[i,E_K+1] ≠ -1
            cw[:,E_K+1] .⊻= circshift(Sc,E_H[i,E_K+1])
        end
    end
    
    z = zeros(Bool,zf,E_M)
    @inbounds for i=1:E_M
        if E_H[i,E_K+1] ≠ -1
            z[:,i] = circshift(cw[:,E_K+1],-E_H[i,E_K+1])
        end
    end

    @inbounds for i = E_M:-1:2
        cw[:,E_K+i] = a[:,i] .⊻ z[:,i] .⊻ cw[:,E_K+i+1]
    end   

    return cw[1:end-zf]

end